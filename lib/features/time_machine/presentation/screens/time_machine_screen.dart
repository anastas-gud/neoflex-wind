import 'dart:math';

import 'package:flutter/material.dart';
import 'package:neoflex_quest/core/constants/colors.dart';
import 'package:neoflex_quest/core/constants/strings.dart';
import 'package:neoflex_quest/core/models/test_attempt.dart';
import 'package:neoflex_quest/core/services/user_service.dart';
import 'package:neoflex_quest/core/services/time_machine_service.dart';
import 'package:neoflex_quest/features/time_machine/presentation/screens/quiz_screen.dart';
import 'package:neoflex_quest/features/time_machine/presentation/widgets/era_card.dart';
import 'package:neoflex_quest/shared/widgets/small_mascot_widget.dart';

import '../../../../core/services/achievement_service.dart';

class TimeMachineScreen extends StatefulWidget {
  final int userId;
  final VoidCallback onUpdate;

  const TimeMachineScreen({
    required this.userId,
    required this.onUpdate,
    Key? key,
  }) : super(key: key);

  @override
  _TimeMachineScreenState createState() => _TimeMachineScreenState();
}

class _TimeMachineScreenState extends State<TimeMachineScreen> {
  late Map<String, int> _attemptsRemaining = {
    '–†–æ–∂–¥–µ–Ω–∏–µ –∫–æ–¥–∞ (2005-2016)': 3,
    '–≠–ø–æ—Ö–∞ –ø—Ä–æ—Ä—ã–≤–∞ (2017-2019)': 3,
    '–¶–∏—Ñ—Ä–æ–≤–∞—è —Ä–µ–≤–æ–ª—é—Ü–∏—è (2020-2023)': 3,
  };

  final TimeMachineService _timeMachineService = TimeMachineService();
  final UserService _userService = UserService();

  @override
  void initState() {
    super.initState();
    _loadAttempts();
  }

  final AchievementService _achievementService = AchievementService(
    userService: UserService(),
  );

  // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  Future<void> _checkAchievements() async {
    try {
      // ID –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
      const chronosaurAchievementId = 1; // –•—Ä–æ–Ω–æ–∑–∞–≤—Ä - –≤—Å–µ —ç–ø–æ—Ö–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ–π–¥–µ–Ω—ã
      const anomalyAchievementId = 4; // –ê–Ω–æ–º–∞–ª–∏—è - –≤—Å–µ —ç–ø–æ—Ö–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —Ö–æ—Ç—è –±—ã –ø–æ 1 —Ä–∞–∑—É

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç—Ç–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
      final hasAnomaly = await _achievementService.hasAchievement(
          widget.userId, anomalyAchievementId);
      final hasChronosaur = await _achievementService.hasAchievement(
          widget.userId, chronosaurAchievementId);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
      final allErasFullyCompleted = _areAllErasFullyCompleted();
      final allErasPlayedAtLeastOnce = _areAllErasPlayedAtLeastOnce();

      // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º "–ê–Ω–æ–º–∞–ª–∏—è" –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      if (!hasAnomaly && allErasPlayedAtLeastOnce) {
        await _achievementService.unlockAchievement(
          widget.userId,
          anomalyAchievementId,
        );
        _showAchievementUnlocked('–ê–Ω–æ–º–∞–ª–∏—è');
      }

      // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º "–•—Ä–æ–Ω–æ–∑–∞–≤—Ä" –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      if (!hasChronosaur && allErasFullyCompleted) {
        await _achievementService.unlockAchievement(
          widget.userId,
          chronosaurAchievementId,
        );
        _showAchievementUnlocked('–•—Ä–æ–Ω–æ–∑–∞–≤—Ä');
      }
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: $e');
    }
  }

  void _showAchievementUnlocked(String achievementName) {
    WidgetsBinding.instance.addPostFrameCallback((_) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('üéâ –ü–æ–ª—É—á–µ–Ω–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "$achievementName"! +50 üçä'),
          duration: Duration(seconds: 5),
          behavior: SnackBarBehavior.floating,
        ),
      );
    });
    widget.onUpdate();
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —ç–ø–æ—Ö–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ–π–¥–µ–Ω—ã (–ø–æ–ø—ã—Ç–∫–∏ <= 0)
  bool _areAllErasFullyCompleted() {
    return _attemptsRemaining.values.every((attempts) => attempts <= 0);
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —ç–ø–æ—Ö–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —Ö–æ—Ç—è –±—ã –ø–æ –æ–¥–Ω–æ–º—É —Ä–∞–∑—É (–ø–æ–ø—ã—Ç–∫–∏ < 3)
  bool _areAllErasPlayedAtLeastOnce() {
    return _attemptsRemaining.values.every((attempts) => attempts < 3);
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ _loadAttempts
  Future<void> _loadAttempts() async {
    final List<TestAttempt> usersTestAttempts =
    await _timeMachineService.findUsersTestAttempts(widget.userId);

    setState(() {
      for (TestAttempt attempt in usersTestAttempts) {
        String displayEra = _getDisplayEraName(attempt.era);
        int used = attempt.attemptsUsed;
        if (_attemptsRemaining.containsKey(displayEra)) {
          _attemptsRemaining[displayEra] = 3 - used;
        }
      }
    });

    // –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    await _checkAchievements();
  }

  String _getDisplayEraName(String dbEra) {
    switch (dbEra) {
      case '–†–æ–∂–¥–µ–Ω–∏–µ –∫–æ–¥–∞':
        return '–†–æ–∂–¥–µ–Ω–∏–µ –∫–æ–¥–∞ (2005-2016)';
      case '–≠–ø–æ—Ö–∞ –ø—Ä–æ—Ä—ã–≤–∞':
        return '–≠–ø–æ—Ö–∞ –ø—Ä–æ—Ä—ã–≤–∞ (2017-2019)';
      case '–¶–∏—Ñ—Ä–æ–≤–∞—è —Ä–µ–≤–æ–ª—é—Ü–∏—è':
        return '–¶–∏—Ñ—Ä–æ–≤–∞—è —Ä–µ–≤–æ–ª—é—Ü–∏—è (2020-2023)';
      default:
        return dbEra;
    }
  }

  String _getDbEraName(String displayEra) {
    if (displayEra.startsWith('–†–æ–∂–¥–µ–Ω–∏–µ –∫–æ–¥–∞')) return '–†–æ–∂–¥–µ–Ω–∏–µ –∫–æ–¥–∞';
    if (displayEra.startsWith('–≠–ø–æ—Ö–∞ –ø—Ä–æ—Ä—ã–≤–∞')) return '–≠–ø–æ—Ö–∞ –ø—Ä–æ—Ä—ã–≤–∞';
    if (displayEra.startsWith('–¶–∏—Ñ—Ä–æ–≤–∞—è —Ä–µ–≤–æ–ª—é—Ü–∏—è'))
      return '–¶–∏—Ñ—Ä–æ–≤–∞—è —Ä–µ–≤–æ–ª—é—Ü–∏—è';
    return displayEra;
  }

  void _navigateToQuiz(BuildContext context, String displayEra) async {
    final dbEra = _getDbEraName(displayEra);
    final attemptsLeft = _attemptsRemaining[displayEra] ?? 3;

    if (attemptsLeft <= 0) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('–ü–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã –¥–ª—è —ç—Ç–æ–π —ç–ø–æ—Ö–∏')),
      );
      return;
    }

    final user = await _userService.getUserById(widget.userId);
    if (user == null) throw Exception('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');

    Navigator.push(
      context,
      MaterialPageRoute(
        builder:
            (context) => QuizScreen(
              userId: widget.userId,
              era: dbEra,
              user: user,
              onUpdate: () {
                widget.onUpdate();
                _loadAttempts(); // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ø—ã—Ç–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
              },
            ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    double _boxWidth = min(MediaQuery.of(context).size.width * 0.85, 400);
    return Scaffold(
      appBar: AppBar(
        elevation: 0,
        scrolledUnderElevation: 0,
        title: Text(
          '–ú–∞—à–∏–Ω–∞ –≤—Ä–µ–º–µ–Ω–∏'.toUpperCase(),
          style: const TextStyle(
            fontSize: 25,
            color: AppColors.pink,
            fontWeight: FontWeight.bold,
            letterSpacing: -1.8,
          ),
        ),
        leading: IconButton(
          icon: Icon(Icons.arrow_back, color: AppColors.pink, size: 30),
          onPressed: () => Navigator.pop(context),
        ),
      ),
      body: ScrollConfiguration(
        behavior: ScrollConfiguration.of(context).copyWith(scrollbars: false),
        child: SingleChildScrollView(
          child: Padding(
            padding: const EdgeInsets.only(right: 15, left: 15, bottom: 25),
            child: Column(
              children: [
                SmallMascotWidget(
                  message: AppStrings.timeMachineDescription,
                  imagePath: 'assets/images/machine.png',
                  boxWidth: _boxWidth,
                  shift: 110,
                ),
                SizedBox(height: 20),
                Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Center(
                      child: ShaderMask(
                        blendMode: BlendMode.srcIn,
                        shaderCallback: (Rect bounds) {
                          return AppColors.orangeGradient.createShader(bounds);
                        },
                        child: Text(
                          '–î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–ø–æ—Ö–∏:'.toUpperCase(),
                          style: TextStyle(
                            fontSize: 22,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                      ),
                    ),
                    SizedBox(height: 20),
                    EraCard(
                      context: context,
                      title: '–†–æ–∂–¥–µ–Ω–∏–µ –∫–æ–¥–∞ (2005-2016)',
                      description:
                          '–û—Å–Ω–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏, –ø–µ—Ä–≤—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –∏ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–∞',
                      attemptsLeft:
                          _attemptsRemaining['–†–æ–∂–¥–µ–Ω–∏–µ –∫–æ–¥–∞ (2005-2016)']!,
                      onTap:
                          () => _navigateToQuiz(
                            context,
                            '–†–æ–∂–¥–µ–Ω–∏–µ –∫–æ–¥–∞ (2005-2016)',
                          ),
                    ),
                    EraCard(
                      context: context,
                      title: '–≠–ø–æ—Ö–∞ –ø—Ä–æ—Ä—ã–≤–∞ (2017-2019)',
                      description:
                          '–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∏ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ',
                      attemptsLeft:
                          _attemptsRemaining['–≠–ø–æ—Ö–∞ –ø—Ä–æ—Ä—ã–≤–∞ (2017-2019)']!,
                      onTap:
                          () => _navigateToQuiz(
                            context,
                            '–≠–ø–æ—Ö–∞ –ø—Ä–æ—Ä—ã–≤–∞ (2017-2019)',
                          ),
                    ),
                    EraCard(
                      context: context,
                      title: '–¶–∏—Ñ—Ä–æ–≤–∞—è —Ä–µ–≤–æ–ª—é—Ü–∏—è (2020-2023)',
                      description:
                          '–ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –∏ —Ü–∏—Ñ—Ä–æ–≤–∞—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è',
                      attemptsLeft:
                          _attemptsRemaining['–¶–∏—Ñ—Ä–æ–≤–∞—è —Ä–µ–≤–æ–ª—é—Ü–∏—è (2020-2023)']!,
                      onTap:
                          () => _navigateToQuiz(
                            context,
                            '–¶–∏—Ñ—Ä–æ–≤–∞—è —Ä–µ–≤–æ–ª—é—Ü–∏—è (2020-2023)',
                          ),
                    ),
                  ],
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}
